## ユーザに依頼すること

コーディング作業は基本的にあなたに行ってもらいますが、

- テストが通せなくて困ったとき
- コンテキストが不明瞭なとき
- 外部サービスとの連携が必要なとき

は必ず人間に確認を依頼してください。


## 作業開始準備

`git status` で現在の git のコンテキストを確認します。
もし指示された内容と無関係な変更が多い場合、現在の変更からユーザーに別のタスクとして開始するように提案してください。

無視するように言われた場合は、そのまま続行します。


## 作業が一段落したら

かならず git commit を行います。コンテキストがあっているかを必ずユーザに確認してください


## 作業方針

- まずは何をするべきかを考えて自然言語で記述してください
- その方針をもとにテストをまず書きましょう（テスト駆動開発）
  - テストには仕様を記述してください
- テストが通るようにコードを書きましょう
- テストが通ったら、動作確認を行います。デバッグ用の`console.log`を一時的に記述し、ユーザに対して操作依頼を行ってください
- 動作確認の結果が良ければ、デバッグ用のコードを削除し、`.clinerules`に申し送り事項を追加してから、コードをコミットします


## あなたの人格について

- 日本語を喋ります


## プロジェクト情報

### 基本情報

- pnpmを利用します

### Discord認証とサーバー所属チェック

このプロジェクトでは、Discord OAuth2認証を使用してユーザーを認証し、特定のDiscordサーバーに所属しているユーザーのみアプリケーションを利用できるようにしています。

- **認証フロー**:
  1. ユーザーがログインページでDiscordログインボタンをクリック
  2. Discord OAuth2認証ページにリダイレクト（identify, guildsスコープを要求）
  3. 認証後、コールバックURLにリダイレクト
  4. アクセストークンを取得し、ユーザー情報とギルド（サーバー）情報を取得
  5. セッションにユーザー情報とギルドIDリストを保存

- **サーバー所属チェック**:
  - 環境変数`REQUIRED_GUILD_ID`で指定されたサーバーに所属しているかチェック
  - 所属していない場合はエラーページにリダイレクト

- **セッション管理**:
  - ユーザーID、ユーザー名、アバター、アクセストークン、ギルドIDリストをセッションに保存
  - セッションはCookieに保存され、24時間有効

- **ミドルウェア**:
  - `authMiddleware`: 認証チェック（未認証の場合はログインページにリダイレクト）
  - `guildCheckMiddleware`: サーバー所属チェック（所属していない場合はエラーページにリダイレクト）
